<?xml version="1.0" encoding="UTF-8"?>
<project name="master" default="none">

    <import file="build-template.xml" />

    <!--
        Use this file to provide your workspace-specific tasks.

        Important:
        Make sure that all defined targets depend on the template.init target.

        1. To execute tasks before and/or after compilation:

        <target name="compile" depends="template.init">
            <echo message="This message is printed before compilation..."/>
            <antcall target="template.compile"/>
            <echo message="This message is printed AFTER compilation."/>
        </target>

        2. Insert a build target:

        <target name="build" dependencies="template.init,template.build,findbugs"/>
        <target name="findbugs">
            ...
        </target>
    -->


	<!--
         ECHO

         Print extra settings
    -->
	<target name="echo" depends="template.init,template.echo">
		<echo>build:                  ${build}</echo>
		<echo>javac.ee:               ${javac.ee}</echo>
		<echo>releaserepo:            ${releaserepo}</echo>
	</target>


    <!--
         JAVADOC
    -->
	<target name="javadoc_init" depends="template.init" unless="javadoc_initialized">
		<fileset dir="${project}" id="srcjavafiles">
			<include name="${src}/**/*.java"/>
		</fileset>
		<pathconvert refid="srcjavafiles" property="srcjavafiles.present" setonempty="false"/>

		<!-- mark init has been run -->
		<property name="javadoc_initialized" value="set" />
	</target>

	<target name="javadoc" depends="template.init,javadoc_init,template.build" if="srcjavafiles.present">
		<javadoc
			windowtitle="${project.name}"
			doctitle="${project.name}"
			destdir="${target}/javadoc"
			source="${javac.source}"
			sourcepath="${src}"
			classpath="${project.buildpath}"
			access="private"
			author="true"
			nodeprecated="false"
			nodeprecatedlist="false"
			noindex="false"
			nonavbar="false"
			notree="false"
			splitindex="true"
			use="true"
			version="true"
			maxmemory="256M">
		</javadoc>
	</target>


	<!--
	     FINDBUGS
	-->
	<target name="findbugs_init" depends="template.init" unless="findbugs_initialized">
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="${workspacedir}/cnf/ant-contrib/ant-contrib-1.0b3.jar" />
			</classpath>
		</taskdef>

		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
			<classpath>
				<fileset dir="${workspacedir}/cnf/findbugs/lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</taskdef>

		<!-- mark init has been run -->
		<property name="findbugs_initialized" value="set" />
	</target>

	<target name="findbugs" depends="template.init,findbugs_init,template.build">
		<property name="project.bootclasspath.adjusted" value="${project.bootclasspath}" />
		<property name="project.buildpath.adjusted" value="${project.buildpath}" />
		<property name="project.testpath.adjusted" value="${project.testpath}" />

		<!-- filter out some jars and directories -->
		<for
			list="[^:]+/ee\.j2se-[0-9\.]+\.jar#${project.output}#^:+#:+$"
			delimiter="#"
			param="regex">
			<sequential>
				<propertyregex
					property="project.bootclasspath.adjusted"
					input="${project.bootclasspath.adjusted}"
					defaultValue="${project.bootclasspath.adjusted}"
					regexp="@{regex}"
					replace=""
					override="true"
					global="yes" />
				<propertyregex
					property="project.buildpath.adjusted"
					input="${project.buildpath.adjusted}"
					defaultValue="${project.buildpath.adjusted}"
					regexp="@{regex}"
					replace=""
					override="true"
					global="yes" />
				<propertyregex
					property="project.testpath.adjusted"
					input="${project.testpath.adjusted}"
					defaultValue="${project.testpath.adjusted}"
					regexp="@{regex}"
					replace=""
					override="true"
					global="yes" />
			</sequential>
		</for>
		<!-- fixups -->
		<propertyregex
			property="project.bootclasspath.adjusted"
			input="${project.bootclasspath.adjusted}"
			defaultValue="${project.bootclasspath.adjusted}"
			regexp=":+"
			replace=":"
			override="true"
			global="yes" />
		<propertyregex
			property="project.buildpath.adjusted"
			input="${project.buildpath.adjusted}"
			defaultValue="${project.buildpath.adjusted}"
			regexp=":+"
			replace=":"
			override="true"
			global="yes" />
		<propertyregex
			property="project.testpath.adjusted"
			input="${project.testpath.adjusted}"
			defaultValue="${project.testpath.adjusted}"
			regexp=":+"
			replace=":"
			override="true"
			global="yes" />

		<findbugs
			home="${workspacedir}/cnf/findbugs"
			includeFilter="${workspacedir}/cnf/findbugs.include.xml"
			excludeFilter="${workspacedir}/cnf/findbugs.exclude.xml"
			output="xml:withMessages"
			outputFile="${target}/${project.name}.findbugs.xml">
			<sourcePath path="${project.sourcepath}" />
			<auxClasspath path="${project.bootclasspath.adjusted}:${project.buildpath.adjusted}:${project.testpath.adjusted}" />
			<class location="${target}" />
		</findbugs>
		<xslt
			in="${target}/${project.name}.findbugs.xml"
			out="${target}/${project.name}.findbugs.html"
			style="${workspacedir}/cnf/findbugs/src/xsl/default.xsl"
			failOnError="false"
		/>
	</target>
</project>
